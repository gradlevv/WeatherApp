package com.example.admin.weatherui.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEEKS".
*/
public class WeeksDao extends AbstractDao<Weeks, Long> {

    public static final String TABLENAME = "WEEKS";

    /**
     * Properties of entity Weeks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City_name = new Property(1, String.class, "city_name", false, "CITY_NAME");
        public final static Property Lon = new Property(2, String.class, "lon", false, "LON");
        public final static Property Timezone = new Property(3, String.class, "timezone", false, "TIMEZONE");
        public final static Property Lat = new Property(4, String.class, "lat", false, "LAT");
        public final static Property Country_code = new Property(5, String.class, "country_code", false, "COUNTRY_CODE");
        public final static Property State_code = new Property(6, String.class, "state_code", false, "STATE_CODE");
    }

    private DaoSession daoSession;


    public WeeksDao(DaoConfig config) {
        super(config);
    }
    
    public WeeksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEEKS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY_NAME\" TEXT," + // 1: city_name
                "\"LON\" TEXT," + // 2: lon
                "\"TIMEZONE\" TEXT," + // 3: timezone
                "\"LAT\" TEXT," + // 4: lat
                "\"COUNTRY_CODE\" TEXT," + // 5: country_code
                "\"STATE_CODE\" TEXT);"); // 6: state_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEEKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Weeks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(2, city_name);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(3, lon);
        }
 
        String timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindString(4, timezone);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(6, country_code);
        }
 
        String state_code = entity.getState_code();
        if (state_code != null) {
            stmt.bindString(7, state_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Weeks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(2, city_name);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(3, lon);
        }
 
        String timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindString(4, timezone);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(6, country_code);
        }
 
        String state_code = entity.getState_code();
        if (state_code != null) {
            stmt.bindString(7, state_code);
        }
    }

    @Override
    protected final void attachEntity(Weeks entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Weeks readEntity(Cursor cursor, int offset) {
        Weeks entity = new Weeks( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // timezone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // country_code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // state_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Weeks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimezone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountry_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Weeks entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Weeks entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Weeks entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
