package com.example.admin.weatherui.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENT_DETAILS".
*/
public class CurrentDetailsDao extends AbstractDao<CurrentDetails, Long> {

    public static final String TABLENAME = "CURRENT_DETAILS";

    /**
     * Properties of entity CurrentDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rh = new Property(1, double.class, "rh", false, "RH");
        public final static Property Pod = new Property(2, String.class, "pod", false, "POD");
        public final static Property Pres = new Property(3, double.class, "pres", false, "PRES");
        public final static Property Timezone = new Property(4, String.class, "timezone", false, "TIMEZONE");
        public final static Property Country_code = new Property(5, String.class, "country_code", false, "COUNTRY_CODE");
        public final static Property Clouds = new Property(6, double.class, "clouds", false, "CLOUDS");
        public final static Property Vis = new Property(7, double.class, "vis", false, "VIS");
        public final static Property Wind_spd = new Property(8, double.class, "wind_spd", false, "WIND_SPD");
        public final static Property Wind_cdir_full = new Property(9, String.class, "wind_cdir_full", false, "WIND_CDIR_FULL");
        public final static Property App_temp = new Property(10, double.class, "app_temp", false, "APP_TEMP");
        public final static Property Lon = new Property(11, double.class, "lon", false, "LON");
        public final static Property State_code = new Property(12, String.class, "state_code", false, "STATE_CODE");
        public final static Property Ts = new Property(13, int.class, "ts", false, "TS");
        public final static Property Elev_angle = new Property(14, double.class, "elev_angle", false, "ELEV_ANGLE");
        public final static Property H_angle = new Property(15, double.class, "h_angle", false, "H_ANGLE");
        public final static Property Dewpt = new Property(16, double.class, "dewpt", false, "DEWPT");
        public final static Property Ob_time = new Property(17, String.class, "ob_time", false, "OB_TIME");
        public final static Property Uv = new Property(18, double.class, "uv", false, "UV");
        public final static Property Sunset = new Property(19, String.class, "sunset", false, "SUNSET");
        public final static Property Sunrise = new Property(20, String.class, "sunrise", false, "SUNRISE");
        public final static Property City_name = new Property(21, String.class, "city_name", false, "CITY_NAME");
        public final static Property Precip = new Property(22, double.class, "precip", false, "PRECIP");
        public final static Property Station = new Property(23, String.class, "station", false, "STATION");
        public final static Property Lat = new Property(24, double.class, "lat", false, "LAT");
        public final static Property Dhi = new Property(25, double.class, "dhi", false, "DHI");
        public final static Property Datetime = new Property(26, String.class, "datetime", false, "DATETIME");
        public final static Property Temp = new Property(27, double.class, "temp", false, "TEMP");
        public final static Property Wind_dir = new Property(28, double.class, "wind_dir", false, "WIND_DIR");
        public final static Property Slp = new Property(29, double.class, "slp", false, "SLP");
        public final static Property Wind_cdir = new Property(30, String.class, "wind_cdir", false, "WIND_CDIR");
        public final static Property WeatherIconsId = new Property(31, long.class, "weatherIconsId", false, "WEATHER_ICONS_ID");
        public final static Property CurrentsId = new Property(32, long.class, "currentsId", false, "CURRENTS_ID");
    }

    private DaoSession daoSession;

    private Query<CurrentDetails> currents_DataQuery;

    public CurrentDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public CurrentDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENT_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RH\" REAL NOT NULL ," + // 1: rh
                "\"POD\" TEXT," + // 2: pod
                "\"PRES\" REAL NOT NULL ," + // 3: pres
                "\"TIMEZONE\" TEXT," + // 4: timezone
                "\"COUNTRY_CODE\" TEXT," + // 5: country_code
                "\"CLOUDS\" REAL NOT NULL ," + // 6: clouds
                "\"VIS\" REAL NOT NULL ," + // 7: vis
                "\"WIND_SPD\" REAL NOT NULL ," + // 8: wind_spd
                "\"WIND_CDIR_FULL\" TEXT," + // 9: wind_cdir_full
                "\"APP_TEMP\" REAL NOT NULL ," + // 10: app_temp
                "\"LON\" REAL NOT NULL ," + // 11: lon
                "\"STATE_CODE\" TEXT," + // 12: state_code
                "\"TS\" INTEGER NOT NULL ," + // 13: ts
                "\"ELEV_ANGLE\" REAL NOT NULL ," + // 14: elev_angle
                "\"H_ANGLE\" REAL NOT NULL ," + // 15: h_angle
                "\"DEWPT\" REAL NOT NULL ," + // 16: dewpt
                "\"OB_TIME\" TEXT," + // 17: ob_time
                "\"UV\" REAL NOT NULL ," + // 18: uv
                "\"SUNSET\" TEXT," + // 19: sunset
                "\"SUNRISE\" TEXT," + // 20: sunrise
                "\"CITY_NAME\" TEXT," + // 21: city_name
                "\"PRECIP\" REAL NOT NULL ," + // 22: precip
                "\"STATION\" TEXT," + // 23: station
                "\"LAT\" REAL NOT NULL ," + // 24: lat
                "\"DHI\" REAL NOT NULL ," + // 25: dhi
                "\"DATETIME\" TEXT," + // 26: datetime
                "\"TEMP\" REAL NOT NULL ," + // 27: temp
                "\"WIND_DIR\" REAL NOT NULL ," + // 28: wind_dir
                "\"SLP\" REAL NOT NULL ," + // 29: slp
                "\"WIND_CDIR\" TEXT," + // 30: wind_cdir
                "\"WEATHER_ICONS_ID\" INTEGER NOT NULL ," + // 31: weatherIconsId
                "\"CURRENTS_ID\" INTEGER NOT NULL );"); // 32: currentsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENT_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrentDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getRh());
 
        String pod = entity.getPod();
        if (pod != null) {
            stmt.bindString(3, pod);
        }
        stmt.bindDouble(4, entity.getPres());
 
        String timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindString(5, timezone);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(6, country_code);
        }
        stmt.bindDouble(7, entity.getClouds());
        stmt.bindDouble(8, entity.getVis());
        stmt.bindDouble(9, entity.getWind_spd());
 
        String wind_cdir_full = entity.getWind_cdir_full();
        if (wind_cdir_full != null) {
            stmt.bindString(10, wind_cdir_full);
        }
        stmt.bindDouble(11, entity.getApp_temp());
        stmt.bindDouble(12, entity.getLon());
 
        String state_code = entity.getState_code();
        if (state_code != null) {
            stmt.bindString(13, state_code);
        }
        stmt.bindLong(14, entity.getTs());
        stmt.bindDouble(15, entity.getElev_angle());
        stmt.bindDouble(16, entity.getH_angle());
        stmt.bindDouble(17, entity.getDewpt());
 
        String ob_time = entity.getOb_time();
        if (ob_time != null) {
            stmt.bindString(18, ob_time);
        }
        stmt.bindDouble(19, entity.getUv());
 
        String sunset = entity.getSunset();
        if (sunset != null) {
            stmt.bindString(20, sunset);
        }
 
        String sunrise = entity.getSunrise();
        if (sunrise != null) {
            stmt.bindString(21, sunrise);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(22, city_name);
        }
        stmt.bindDouble(23, entity.getPrecip());
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(24, station);
        }
        stmt.bindDouble(25, entity.getLat());
        stmt.bindDouble(26, entity.getDhi());
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(27, datetime);
        }
        stmt.bindDouble(28, entity.getTemp());
        stmt.bindDouble(29, entity.getWind_dir());
        stmt.bindDouble(30, entity.getSlp());
 
        String wind_cdir = entity.getWind_cdir();
        if (wind_cdir != null) {
            stmt.bindString(31, wind_cdir);
        }
        stmt.bindLong(32, entity.getWeatherIconsId());
        stmt.bindLong(33, entity.getCurrentsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrentDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getRh());
 
        String pod = entity.getPod();
        if (pod != null) {
            stmt.bindString(3, pod);
        }
        stmt.bindDouble(4, entity.getPres());
 
        String timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindString(5, timezone);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(6, country_code);
        }
        stmt.bindDouble(7, entity.getClouds());
        stmt.bindDouble(8, entity.getVis());
        stmt.bindDouble(9, entity.getWind_spd());
 
        String wind_cdir_full = entity.getWind_cdir_full();
        if (wind_cdir_full != null) {
            stmt.bindString(10, wind_cdir_full);
        }
        stmt.bindDouble(11, entity.getApp_temp());
        stmt.bindDouble(12, entity.getLon());
 
        String state_code = entity.getState_code();
        if (state_code != null) {
            stmt.bindString(13, state_code);
        }
        stmt.bindLong(14, entity.getTs());
        stmt.bindDouble(15, entity.getElev_angle());
        stmt.bindDouble(16, entity.getH_angle());
        stmt.bindDouble(17, entity.getDewpt());
 
        String ob_time = entity.getOb_time();
        if (ob_time != null) {
            stmt.bindString(18, ob_time);
        }
        stmt.bindDouble(19, entity.getUv());
 
        String sunset = entity.getSunset();
        if (sunset != null) {
            stmt.bindString(20, sunset);
        }
 
        String sunrise = entity.getSunrise();
        if (sunrise != null) {
            stmt.bindString(21, sunrise);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(22, city_name);
        }
        stmt.bindDouble(23, entity.getPrecip());
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(24, station);
        }
        stmt.bindDouble(25, entity.getLat());
        stmt.bindDouble(26, entity.getDhi());
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(27, datetime);
        }
        stmt.bindDouble(28, entity.getTemp());
        stmt.bindDouble(29, entity.getWind_dir());
        stmt.bindDouble(30, entity.getSlp());
 
        String wind_cdir = entity.getWind_cdir();
        if (wind_cdir != null) {
            stmt.bindString(31, wind_cdir);
        }
        stmt.bindLong(32, entity.getWeatherIconsId());
        stmt.bindLong(33, entity.getCurrentsId());
    }

    @Override
    protected final void attachEntity(CurrentDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CurrentDetails readEntity(Cursor cursor, int offset) {
        CurrentDetails entity = new CurrentDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // rh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pod
            cursor.getDouble(offset + 3), // pres
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timezone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // country_code
            cursor.getDouble(offset + 6), // clouds
            cursor.getDouble(offset + 7), // vis
            cursor.getDouble(offset + 8), // wind_spd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // wind_cdir_full
            cursor.getDouble(offset + 10), // app_temp
            cursor.getDouble(offset + 11), // lon
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // state_code
            cursor.getInt(offset + 13), // ts
            cursor.getDouble(offset + 14), // elev_angle
            cursor.getDouble(offset + 15), // h_angle
            cursor.getDouble(offset + 16), // dewpt
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ob_time
            cursor.getDouble(offset + 18), // uv
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // sunset
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // sunrise
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // city_name
            cursor.getDouble(offset + 22), // precip
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // station
            cursor.getDouble(offset + 24), // lat
            cursor.getDouble(offset + 25), // dhi
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // datetime
            cursor.getDouble(offset + 27), // temp
            cursor.getDouble(offset + 28), // wind_dir
            cursor.getDouble(offset + 29), // slp
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // wind_cdir
            cursor.getLong(offset + 31), // weatherIconsId
            cursor.getLong(offset + 32) // currentsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrentDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRh(cursor.getDouble(offset + 1));
        entity.setPod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPres(cursor.getDouble(offset + 3));
        entity.setTimezone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountry_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClouds(cursor.getDouble(offset + 6));
        entity.setVis(cursor.getDouble(offset + 7));
        entity.setWind_spd(cursor.getDouble(offset + 8));
        entity.setWind_cdir_full(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setApp_temp(cursor.getDouble(offset + 10));
        entity.setLon(cursor.getDouble(offset + 11));
        entity.setState_code(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTs(cursor.getInt(offset + 13));
        entity.setElev_angle(cursor.getDouble(offset + 14));
        entity.setH_angle(cursor.getDouble(offset + 15));
        entity.setDewpt(cursor.getDouble(offset + 16));
        entity.setOb_time(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUv(cursor.getDouble(offset + 18));
        entity.setSunset(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSunrise(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCity_name(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPrecip(cursor.getDouble(offset + 22));
        entity.setStation(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLat(cursor.getDouble(offset + 24));
        entity.setDhi(cursor.getDouble(offset + 25));
        entity.setDatetime(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTemp(cursor.getDouble(offset + 27));
        entity.setWind_dir(cursor.getDouble(offset + 28));
        entity.setSlp(cursor.getDouble(offset + 29));
        entity.setWind_cdir(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setWeatherIconsId(cursor.getLong(offset + 31));
        entity.setCurrentsId(cursor.getLong(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CurrentDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CurrentDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CurrentDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of Currents. */
    public List<CurrentDetails> _queryCurrents_Data(long currentsId) {
        synchronized (this) {
            if (currents_DataQuery == null) {
                QueryBuilder<CurrentDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CurrentsId.eq(null));
                currents_DataQuery = queryBuilder.build();
            }
        }
        Query<CurrentDetails> query = currents_DataQuery.forCurrentThread();
        query.setParameter(0, currentsId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWeatherIconsDao().getAllColumns());
            builder.append(" FROM CURRENT_DETAILS T");
            builder.append(" LEFT JOIN WEATHER_ICONS T0 ON T.\"WEATHER_ICONS_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CurrentDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        CurrentDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WeatherIcons weatherIcons = loadCurrentOther(daoSession.getWeatherIconsDao(), cursor, offset);
         if(weatherIcons != null) {
            entity.setWeatherIcons(weatherIcons);
        }

        return entity;    
    }

    public CurrentDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CurrentDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CurrentDetails> list = new ArrayList<CurrentDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CurrentDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CurrentDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
