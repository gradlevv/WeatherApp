package com.example.admin.weatherui.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEEKS_DETAILS".
*/
public class WeeksDetailsDao extends AbstractDao<WeeksDetails, Long> {

    public static final String TABLENAME = "WEEKS_DETAILS";

    /**
     * Properties of entity WeeksDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Wind_cdir = new Property(1, String.class, "wind_cdir", false, "WIND_CDIR");
        public final static Property Rh = new Property(2, double.class, "rh", false, "RH");
        public final static Property Wind_spd = new Property(3, double.class, "wind_spd", false, "WIND_SPD");
        public final static Property Pop = new Property(4, double.class, "pop", false, "POP");
        public final static Property Wind_cdir_full = new Property(5, String.class, "wind_cdir_full", false, "WIND_CDIR_FULL");
        public final static Property Slp = new Property(6, double.class, "slp", false, "SLP");
        public final static Property App_max_temp = new Property(7, double.class, "app_max_temp", false, "APP_MAX_TEMP");
        public final static Property Pres = new Property(8, double.class, "pres", false, "PRES");
        public final static Property Dewpt = new Property(9, double.class, "dewpt", false, "DEWPT");
        public final static Property Snow = new Property(10, double.class, "snow", false, "SNOW");
        public final static Property Uv = new Property(11, double.class, "uv", false, "UV");
        public final static Property Ts = new Property(12, int.class, "ts", false, "TS");
        public final static Property Wind_dir = new Property(13, double.class, "wind_dir", false, "WIND_DIR");
        public final static Property App_min_temp = new Property(14, double.class, "app_min_temp", false, "APP_MIN_TEMP");
        public final static Property Max_temp = new Property(15, double.class, "max_temp", false, "MAX_TEMP");
        public final static Property Snow_depth = new Property(16, double.class, "snow_depth", false, "SNOW_DEPTH");
        public final static Property Precip = new Property(17, double.class, "precip", false, "PRECIP");
        public final static Property Max_dhi = new Property(18, double.class, "max_dhi", false, "MAX_DHI");
        public final static Property Datetime = new Property(19, String.class, "datetime", false, "DATETIME");
        public final static Property Temp = new Property(20, double.class, "temp", false, "TEMP");
        public final static Property Min_temp = new Property(21, double.class, "min_temp", false, "MIN_TEMP");
        public final static Property Clouds = new Property(22, double.class, "clouds", false, "CLOUDS");
        public final static Property Vis = new Property(23, double.class, "vis", false, "VIS");
        public final static Property WeeksId = new Property(24, long.class, "weeksId", false, "WEEKS_ID");
        public final static Property WeatherIconsId = new Property(25, long.class, "weatherIconsId", false, "WEATHER_ICONS_ID");
    }

    private DaoSession daoSession;

    private Query<WeeksDetails> weeks_DataQuery;

    public WeeksDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public WeeksDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEEKS_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WIND_CDIR\" TEXT," + // 1: wind_cdir
                "\"RH\" REAL NOT NULL ," + // 2: rh
                "\"WIND_SPD\" REAL NOT NULL ," + // 3: wind_spd
                "\"POP\" REAL NOT NULL ," + // 4: pop
                "\"WIND_CDIR_FULL\" TEXT," + // 5: wind_cdir_full
                "\"SLP\" REAL NOT NULL ," + // 6: slp
                "\"APP_MAX_TEMP\" REAL NOT NULL ," + // 7: app_max_temp
                "\"PRES\" REAL NOT NULL ," + // 8: pres
                "\"DEWPT\" REAL NOT NULL ," + // 9: dewpt
                "\"SNOW\" REAL NOT NULL ," + // 10: snow
                "\"UV\" REAL NOT NULL ," + // 11: uv
                "\"TS\" INTEGER NOT NULL ," + // 12: ts
                "\"WIND_DIR\" REAL NOT NULL ," + // 13: wind_dir
                "\"APP_MIN_TEMP\" REAL NOT NULL ," + // 14: app_min_temp
                "\"MAX_TEMP\" REAL NOT NULL ," + // 15: max_temp
                "\"SNOW_DEPTH\" REAL NOT NULL ," + // 16: snow_depth
                "\"PRECIP\" REAL NOT NULL ," + // 17: precip
                "\"MAX_DHI\" REAL NOT NULL ," + // 18: max_dhi
                "\"DATETIME\" TEXT," + // 19: datetime
                "\"TEMP\" REAL NOT NULL ," + // 20: temp
                "\"MIN_TEMP\" REAL NOT NULL ," + // 21: min_temp
                "\"CLOUDS\" REAL NOT NULL ," + // 22: clouds
                "\"VIS\" REAL NOT NULL ," + // 23: vis
                "\"WEEKS_ID\" INTEGER NOT NULL ," + // 24: weeksId
                "\"WEATHER_ICONS_ID\" INTEGER NOT NULL );"); // 25: weatherIconsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEEKS_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeeksDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wind_cdir = entity.getWind_cdir();
        if (wind_cdir != null) {
            stmt.bindString(2, wind_cdir);
        }
        stmt.bindDouble(3, entity.getRh());
        stmt.bindDouble(4, entity.getWind_spd());
        stmt.bindDouble(5, entity.getPop());
 
        String wind_cdir_full = entity.getWind_cdir_full();
        if (wind_cdir_full != null) {
            stmt.bindString(6, wind_cdir_full);
        }
        stmt.bindDouble(7, entity.getSlp());
        stmt.bindDouble(8, entity.getApp_max_temp());
        stmt.bindDouble(9, entity.getPres());
        stmt.bindDouble(10, entity.getDewpt());
        stmt.bindDouble(11, entity.getSnow());
        stmt.bindDouble(12, entity.getUv());
        stmt.bindLong(13, entity.getTs());
        stmt.bindDouble(14, entity.getWind_dir());
        stmt.bindDouble(15, entity.getApp_min_temp());
        stmt.bindDouble(16, entity.getMax_temp());
        stmt.bindDouble(17, entity.getSnow_depth());
        stmt.bindDouble(18, entity.getPrecip());
        stmt.bindDouble(19, entity.getMax_dhi());
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(20, datetime);
        }
        stmt.bindDouble(21, entity.getTemp());
        stmt.bindDouble(22, entity.getMin_temp());
        stmt.bindDouble(23, entity.getClouds());
        stmt.bindDouble(24, entity.getVis());
        stmt.bindLong(25, entity.getWeeksId());
        stmt.bindLong(26, entity.getWeatherIconsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeeksDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wind_cdir = entity.getWind_cdir();
        if (wind_cdir != null) {
            stmt.bindString(2, wind_cdir);
        }
        stmt.bindDouble(3, entity.getRh());
        stmt.bindDouble(4, entity.getWind_spd());
        stmt.bindDouble(5, entity.getPop());
 
        String wind_cdir_full = entity.getWind_cdir_full();
        if (wind_cdir_full != null) {
            stmt.bindString(6, wind_cdir_full);
        }
        stmt.bindDouble(7, entity.getSlp());
        stmt.bindDouble(8, entity.getApp_max_temp());
        stmt.bindDouble(9, entity.getPres());
        stmt.bindDouble(10, entity.getDewpt());
        stmt.bindDouble(11, entity.getSnow());
        stmt.bindDouble(12, entity.getUv());
        stmt.bindLong(13, entity.getTs());
        stmt.bindDouble(14, entity.getWind_dir());
        stmt.bindDouble(15, entity.getApp_min_temp());
        stmt.bindDouble(16, entity.getMax_temp());
        stmt.bindDouble(17, entity.getSnow_depth());
        stmt.bindDouble(18, entity.getPrecip());
        stmt.bindDouble(19, entity.getMax_dhi());
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(20, datetime);
        }
        stmt.bindDouble(21, entity.getTemp());
        stmt.bindDouble(22, entity.getMin_temp());
        stmt.bindDouble(23, entity.getClouds());
        stmt.bindDouble(24, entity.getVis());
        stmt.bindLong(25, entity.getWeeksId());
        stmt.bindLong(26, entity.getWeatherIconsId());
    }

    @Override
    protected final void attachEntity(WeeksDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeeksDetails readEntity(Cursor cursor, int offset) {
        WeeksDetails entity = new WeeksDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wind_cdir
            cursor.getDouble(offset + 2), // rh
            cursor.getDouble(offset + 3), // wind_spd
            cursor.getDouble(offset + 4), // pop
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wind_cdir_full
            cursor.getDouble(offset + 6), // slp
            cursor.getDouble(offset + 7), // app_max_temp
            cursor.getDouble(offset + 8), // pres
            cursor.getDouble(offset + 9), // dewpt
            cursor.getDouble(offset + 10), // snow
            cursor.getDouble(offset + 11), // uv
            cursor.getInt(offset + 12), // ts
            cursor.getDouble(offset + 13), // wind_dir
            cursor.getDouble(offset + 14), // app_min_temp
            cursor.getDouble(offset + 15), // max_temp
            cursor.getDouble(offset + 16), // snow_depth
            cursor.getDouble(offset + 17), // precip
            cursor.getDouble(offset + 18), // max_dhi
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // datetime
            cursor.getDouble(offset + 20), // temp
            cursor.getDouble(offset + 21), // min_temp
            cursor.getDouble(offset + 22), // clouds
            cursor.getDouble(offset + 23), // vis
            cursor.getLong(offset + 24), // weeksId
            cursor.getLong(offset + 25) // weatherIconsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeeksDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWind_cdir(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRh(cursor.getDouble(offset + 2));
        entity.setWind_spd(cursor.getDouble(offset + 3));
        entity.setPop(cursor.getDouble(offset + 4));
        entity.setWind_cdir_full(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSlp(cursor.getDouble(offset + 6));
        entity.setApp_max_temp(cursor.getDouble(offset + 7));
        entity.setPres(cursor.getDouble(offset + 8));
        entity.setDewpt(cursor.getDouble(offset + 9));
        entity.setSnow(cursor.getDouble(offset + 10));
        entity.setUv(cursor.getDouble(offset + 11));
        entity.setTs(cursor.getInt(offset + 12));
        entity.setWind_dir(cursor.getDouble(offset + 13));
        entity.setApp_min_temp(cursor.getDouble(offset + 14));
        entity.setMax_temp(cursor.getDouble(offset + 15));
        entity.setSnow_depth(cursor.getDouble(offset + 16));
        entity.setPrecip(cursor.getDouble(offset + 17));
        entity.setMax_dhi(cursor.getDouble(offset + 18));
        entity.setDatetime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTemp(cursor.getDouble(offset + 20));
        entity.setMin_temp(cursor.getDouble(offset + 21));
        entity.setClouds(cursor.getDouble(offset + 22));
        entity.setVis(cursor.getDouble(offset + 23));
        entity.setWeeksId(cursor.getLong(offset + 24));
        entity.setWeatherIconsId(cursor.getLong(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeeksDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeeksDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeeksDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of Weeks. */
    public List<WeeksDetails> _queryWeeks_Data(long weeksId) {
        synchronized (this) {
            if (weeks_DataQuery == null) {
                QueryBuilder<WeeksDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WeeksId.eq(null));
                weeks_DataQuery = queryBuilder.build();
            }
        }
        Query<WeeksDetails> query = weeks_DataQuery.forCurrentThread();
        query.setParameter(0, weeksId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWeatherIconsDao().getAllColumns());
            builder.append(" FROM WEEKS_DETAILS T");
            builder.append(" LEFT JOIN WEATHER_ICONS T0 ON T.\"WEATHER_ICONS_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WeeksDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        WeeksDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WeatherIcons weatherIcons = loadCurrentOther(daoSession.getWeatherIconsDao(), cursor, offset);
         if(weatherIcons != null) {
            entity.setWeatherIcons(weatherIcons);
        }

        return entity;    
    }

    public WeeksDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WeeksDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WeeksDetails> list = new ArrayList<WeeksDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WeeksDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WeeksDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
